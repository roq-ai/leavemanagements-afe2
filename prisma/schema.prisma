generator client {
  provider = "prisma-client-js"
  previewFeatures = ["clientExtensions"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model company {
  id          String       @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  description String?      @db.VarChar(255)
  image       String?      @db.VarChar(255)
  name        String       @db.VarChar(255)
  created_at  DateTime     @default(now()) @db.Timestamp(6)
  updated_at  DateTime     @default(now()) @db.Timestamp(6)
  user_id     String       @db.Uuid
  tenant_id   String       @db.VarChar(255)
  user        user         @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  leave_type  leave_type[]
}

model leave_request {
  id                                   String     @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  start_date                           DateTime   @db.Date
  end_date                             DateTime   @db.Date
  status                               String     @db.VarChar(255)
  leave_type_id                        String     @db.Uuid
  employee_id                          String     @db.Uuid
  manager_id                           String     @db.Uuid
  created_at                           DateTime   @default(now()) @db.Timestamp(6)
  updated_at                           DateTime   @default(now()) @db.Timestamp(6)
  user_leave_request_employee_idTouser user       @relation("leave_request_employee_idTouser", fields: [employee_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  leave_type                           leave_type @relation(fields: [leave_type_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  user_leave_request_manager_idTouser  user       @relation("leave_request_manager_idTouser", fields: [manager_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model leave_type {
  id            String          @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name          String          @db.VarChar(255)
  company_id    String          @db.Uuid
  created_at    DateTime        @default(now()) @db.Timestamp(6)
  updated_at    DateTime        @default(now()) @db.Timestamp(6)
  leave_request leave_request[]
  company       company         @relation(fields: [company_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model user {
  id                                            String          @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  email                                         String          @unique @db.VarChar(255)
  firstName                                     String?         @db.VarChar(255)
  lastName                                      String?         @db.VarChar(255)
  roq_user_id                                   String          @db.VarChar(255)
  tenant_id                                     String          @db.VarChar(255)
  created_at                                    DateTime        @default(now()) @db.Timestamp(6)
  updated_at                                    DateTime        @default(now()) @db.Timestamp(6)
  company                                       company[]
  leave_request_leave_request_employee_idTouser leave_request[] @relation("leave_request_employee_idTouser")
  leave_request_leave_request_manager_idTouser  leave_request[] @relation("leave_request_manager_idTouser")
}
